trigger:
- main

variables:
- group: DevOpsSettings
- name: tag
  value: '$(Build.BuildId)'
- name: vmImageName
  value: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(ImageRepository)
        dockerfile: $(Build.SourcesDirectory)/$(DockerfilePath)
        containerRegistry: $(DockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: TestTerraform
  displayName: 'Test Terraform'
  jobs:
  - job: TestTerraform
    displayName: 'Test Terraform'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(TerraformWorkingDirectory)'
        backendServiceArm: '$(AzureServiceConnection)'
        backendAzureRmResourceGroupName: '$(TerraformStateRG)'
        backendAzureRmStorageAccountName: '$(TerraformStateStorageAccount)'
        backendAzureRmContainerName: '$(TerraformStateContainer)'
        backendAzureRmKey: '$(TerraformStateKey)'

    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(TerraformWorkingDirectory)'
        environmentServiceNameAzureRM: '$(AzureServiceConnection)'

- stage: Deploy
  displayName: 'Deploy to Azure'
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure App Service'
    environment: '$(DeploymentEnvironment)'
    pool: 
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              appName: '$(AppServiceName)'
              appType: 'webApp'
              deployToSlotOrASE: true
              resourceGroupName: '$(ResourceGroupName)'
              slotName: '$(DeploymentSlot)'
              containers: $(ContainerRegistry)/$(ImageRepository):$(tag)